import numpy as np
import matplotlib.pyplot as plt

# Constants
R = 8.314  # Universal gas constant, J/(mol·K)
Ea = 131000  # Activation energy, J/mol
A = 1.58e16  # Pre-exponential factor, 1/s
delta_H = -1522e3  # Enthalpy change, J/kg
Cp = 2.15  # Heat capacity, J/(g·K) - assumed average value for DTBP
rho = 0.740  # Density of DTBP, g/cm³

# Initial conditions
T0 = 298.15  # Initial temperature, K (25°C)
C0 = 5  # Initial concentration, mol/L
V = 1  # Reactor volume, L

# Time parameters
t_max = 500  # Maximum simulation time, seconds
dt = 0.1  # Time step, seconds
time = np.arange(0, t_max, dt)

# Arrays to store results
temperature = np.zeros_like(time)
concentration = np.zeros_like(time)

# Initial values
temperature[0] = T0
concentration[0] = C0

# Simulation loop
for i in range(1, len(time)):
    T = temperature[i-1]
    C = concentration[i-1]
    
    # Reaction rate (Arrhenius equation)
    k = A * np.exp(-Ea / (R * T))
    
    # Rate of change of concentration
    dCdt = -k * C
    
    # Rate of change of temperature
    dTdt = (-delta_H * dCdt) / (Cp * rho)
    
    # Update concentration and temperature
    concentration[i] = C + dCdt * dt
    temperature[i] = T + dTdt * dt
    
    # Stop simulation if temperature exceeds a safety threshold
    if temperature[i] > 800:  # Arbitrary safety limit, K
        temperature = temperature[:i+1]
        concentration = concentration[:i+1]
        time = time[:i+1]
        print("Thermal runaway detected. Simulation stopped.")
        break

# Plot results
plt.figure(figsize=(10, 5))
plt.subplot(1, 2, 1)
plt.plot(time, temperature - 273.15, 'r-')
plt.xlabel('Time (s)')
plt.ylabel('Temperature (°C)')
plt.title('Temperature vs. Time')

plt.subplot(1, 2, 2)
plt.plot(time, concentration, 'b-')
plt.xlabel('Time (s)')
plt.ylabel('Concentration (mol/L)')
plt.title('Concentration vs. Time')

plt.tight_layout()
plt.show()
